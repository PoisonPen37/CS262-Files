--Lab08 Part 1

--Retrieve a list of all the games, ordered by date with the most recent game coming first.
SELECT *
FROM Game
ORDER BY time DESC;

--Retrieve all the games that occurred in the past week.
SELECT *
FROM Game
WHERE time > time - interval '7 days';

--Retrieve a list of players who have (non-NULL) names.
SELECT *
FROM Player
WHERE name IS NOT NULL;

--Retrieve a list of IDs for players who have some game score larger than 2000.
SELECT playerID
FROM PlayerGame
WHERE score > 2000;

--Retrieve a list of players who have GMail accounts.
SELECT *
FROM Player
WHERE emailAddress LIKE '%gmail%';

--Lab08 Part 2

--Retrieve all “The King”’s game scores in decreasing order. 
SELECT score
FROM Player, PlayerGame
WHERE Player.ID = PlayerGame.playerID
  AND Player.name = 'The King'
ORDER BY score DESC;

--Retrieve the name of the winner of the game played on 2006-06-28 13:20:00. 
SELECT Player.name 
FROM Player, Game, PlayerGame 
WHERE Player.ID = PlayerGame.playerID 
	AND Game.ID = PlayerGame.gameID 
	AND Game.time = '2006-06-28 13:20:00' 
ORDER BY PLayerGame.score DESC LIMIT 1;

--So what does that P1.ID < P2.ID clause do in the last example query? 
P1.ID < P2.ID stops the statement from returning player IDs that are equal.

--The query that joined the Player table to itself seems rather contrived. Can you think of a realistic situation in which you’d want to join a table to itself? 
Joining a table to itself would be logical when comparing player ID numbers to check for duplicates (since player ID numbers must be unique).
